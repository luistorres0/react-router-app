{"version":3,"sources":["pages/dummydata.js","pages/UserListPage.js","pages/LoginPage.js","App.js","serviceWorker.js","index.js"],"names":["DUMMY_DATA","id","email","password","listItems","UserListPage","useParams","foundUser","find","user","listContent","map","item","index","className","key","console","log","type","LoginPage","useState","setEmail","setPassword","toListPage","setToListPage","isSigningUp","setIsSigningUp","isAuthenticated","setIsAuthenticated","prompt","onSubmit","event","preventDefault","newAccount","Math","random","toString","push","htmlFor","placeholder","required","autoFocus","onChange","target","value","to","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ef6dad34.chunk.js","sourcesContent":["let DUMMY_DATA = [\r\n    {\r\n      id: \"1\",\r\n      email: \"luffy@email.com\",\r\n      password: \"meat\",\r\n      listItems: [\"eat\", \"eat more\", \"make trouble\"],\r\n    },\r\n    {\r\n      id: \"2\",\r\n      email: \"nami@email.com\",\r\n      password: \"money\",\r\n      listItems: [\"read\", \"treasure hunt\", \"navigate\"],\r\n    },\r\n    {\r\n      id: \"3\",\r\n      email: \"zoro@email.com\",\r\n      password: \"sleep\",\r\n      listItems: [\"sleep\", \"train\", \"more sleep\"],\r\n    },\r\n  ];\r\n  \r\n\r\nexport default DUMMY_DATA;","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"./UserListPage.css\";\r\nimport DUMMY_DATA from \"./dummydata.js\";\r\n\r\nconst UserListPage = () => {\r\n  const { email } = useParams();\r\n  const foundUser = DUMMY_DATA.find((user) => user.email === email);\r\n  let listContent = <h2>User Not Found</h2>;\r\n  if (foundUser) {\r\n    listContent = foundUser.listItems.map((item, index) => {\r\n      return (\r\n        <li className=\"list-group-item\" key={index}>\r\n          {item}\r\n        </li>\r\n      );\r\n    });\r\n  }\r\n  console.log(DUMMY_DATA);\r\n  return (\r\n    <div className=\"my-list-group-container\">\r\n      <h2>Today</h2>\r\n      <ul className=\"list-group\">\r\n        {listContent}\r\n        <li className=\"list-group-item\">\r\n          <input type=\"text\" />\r\n          <button className=\"btn btn-primary\" type=\"submit\">\r\n            +\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserListPage;\r\n","import React, { useState } from \"react\";\r\nimport \"./LoginPage.css\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport DUMMY_DATA from \"./dummydata\";\r\nimport UserListPage from \"./UserListPage\";\r\n\r\nconst LoginPage = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [toListPage, setToListPage] = useState(false);\r\n  const [isSigningUp, setIsSigningUp] = useState(false);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  const onSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    if (!isSigningUp) {\r\n      let foundUser = DUMMY_DATA.find((user) => user.email === email);\r\n      if(foundUser) {\r\n          setIsAuthenticated(true);\r\n          setToListPage(true);\r\n      } else {\r\n          setIsSigningUp(true);\r\n      }\r\n    } else {\r\n        let newAccount = {\r\n            id: Math.random().toString(),\r\n            email: email,\r\n            password: password,\r\n            listItems: []\r\n        }\r\n        DUMMY_DATA.push(newAccount);\r\n        setIsAuthenticated(true);\r\n        setToListPage(true);\r\n    }\r\n  };\r\n\r\n  const onEmailChangehandler = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  const onPasswordChangehandler = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  const prompt = isSigningUp ? \"up\" : \"in\";\r\n\r\n  return (\r\n    <div className=\"my-login-container\">\r\n      <form className=\"form-signin\" onSubmit={onSubmitHandler}>\r\n        <h1 className=\"h3 mb-3 font-weight-normal\">{\"Please Sign \" + prompt}</h1>\r\n        <label htmlFor=\"inputEmail\" className=\"sr-only\">\r\n          Email address\r\n        </label>\r\n        <input\r\n          type=\"email\"\r\n          id=\"inputEmail\"\r\n          className=\"form-control\"\r\n          placeholder=\"Email address\"\r\n          required\r\n          autoFocus\r\n          onChange={onEmailChangehandler}\r\n          value={email}\r\n        />\r\n        <label htmlFor=\"inputPassword\" className=\"sr-only\">\r\n          Password\r\n        </label>\r\n        <input\r\n          type=\"password\"\r\n          id=\"inputPassword\"\r\n          className=\"form-control\"\r\n          placeholder=\"Password\"\r\n          required\r\n          onChange={onPasswordChangehandler}\r\n          value={password}\r\n        />\r\n        <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">\r\n        {\"Sign \" + prompt}\r\n        </button>\r\n        <p className=\"mt-5 mb-3 text-muted\">&copy; 2017-2020</p>\r\n      </form>\r\n      {toListPage && isAuthenticated && <Redirect to={`/${email}/list`} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport UserListPage from \"./pages/UserListPage\";\nimport LoginPage from \"./pages/LoginPage\";\n\nfunction App() {\n  return (\n    <Router>\n      <main>\n        <Switch>\n          <Route path=\"/\" exact>\n            <LoginPage />\n          </Route>\n          <Route path=\"/:email/list\" exact>\n            <UserListPage />\n          </Route>\n          <Redirect to=\"/\" />\n        </Switch>\n      </main>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}